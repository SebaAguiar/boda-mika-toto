// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from '@xata.io/client';
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from '@xata.io/client';

const tables = [
  {
    name: 'music',
    checkConstraints: {
      music_xata_id_length_xata_id: {
        name: 'music_xata_id_length_xata_id',
        columns: ['xata_id'],
        definition: 'CHECK ((length(xata_id) < 256))',
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_music_xata_id_key: {
        name: '_pgroll_new_music_xata_id_key',
        columns: ['xata_id'],
      },
    },
    columns: [
      {
        name: 'name',
        type: 'text',
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '',
      },
      {
        name: 'song_url',
        type: 'text',
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '',
      },
      {
        name: 'username',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '',
      },
      {
        name: 'xata_createdat',
        type: 'datetime',
        notNull: true,
        unique: false,
        defaultValue: 'now()',
        comment: '',
      },
      {
        name: 'xata_id',
        type: 'text',
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: '',
      },
      {
        name: 'xata_updatedat',
        type: 'datetime',
        notNull: true,
        unique: false,
        defaultValue: 'now()',
        comment: '',
      },
      {
        name: 'xata_version',
        type: 'int',
        notNull: true,
        unique: false,
        defaultValue: '0',
        comment: '',
      },
    ],
  },
  {
    name: 'users',
    checkConstraints: {
      users_xata_id_length_xata_id: {
        name: 'users_xata_id_length_xata_id',
        columns: ['xata_id'],
        definition: 'CHECK ((length(xata_id) < 256))',
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_users_xata_id_key: {
        name: '_pgroll_new_users_xata_id_key',
        columns: ['xata_id'],
      },
    },
    columns: [
      {
        name: '_10',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_11',
        type: 'int',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_3',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_4',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_5',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_6',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_7',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_8',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: '_9',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: 'cantidad',
        type: 'int',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: 'cantidad_2',
        type: 'int',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: 'name',
        type: 'text',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{}',
      },
      {
        name: 'status',
        type: 'bool',
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '',
      },
      {
        name: 'xata_createdat',
        type: 'datetime',
        notNull: true,
        unique: false,
        defaultValue: 'now()',
        comment: '',
      },
      {
        name: 'xata_id',
        type: 'text',
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: '',
      },
      {
        name: 'xata_updatedat',
        type: 'datetime',
        notNull: true,
        unique: false,
        defaultValue: 'now()',
        comment: '',
      },
      {
        name: 'xata_version',
        type: 'int',
        notNull: true,
        unique: false,
        defaultValue: '0',
        comment: '',
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Music = InferredTypes['music'];
export type MusicRecord = Music & XataRecord;

export type Users = InferredTypes['users'];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  music: MusicRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    'https://Toto-Aguiar-s-workspace-e9i8ue.us-east-1.xata.sh/db/boda',
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient({
    apiKey: process.env.XATA_API_KEY,
    branch: process.env.XATA_BRANCH,
  });
  return instance;
};

export const xata = getXataClient();
